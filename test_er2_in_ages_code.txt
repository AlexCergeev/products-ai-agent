Код sql:
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    age INT CHECK (age >= 18 AND age <= 100),
    income DECIMAL(15,2) CHECK (income >= 0),
    credit_score INT CHECK (credit_score >= 300 AND credit_score <= 850),
    existing_loans INT CHECK (existing_loans >= 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE credit_applications (
    application_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id) ON DELETE CASCADE,
    amount DECIMAL(15,2) CHECK (amount > 0),
    term_months INT CHECK (term_months > 0),
    status VARCHAR(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE credit_decisions (
    decision_id SERIAL PRIMARY KEY,
    application_id INT REFERENCES credit_applications(application_id) ON DELETE CASCADE,
    approved BOOLEAN NOT NULL,
    reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
SELECT 
    c.customer_id, 
    c.name, 
    c.age, 
    c.income, 
    c.credit_score, 
    c.existing_loans, 
    a.application_id, 
    a.amount, 
    a.term_months, 
    a.status 
FROM credit_applications a
JOIN customers c ON a.customer_id = c.customer_id
WHERE a.status = 'pending';
Код python:
import psycopg2
import pandas as pd
Подключение к базе данных
def get_db_connection():
    return psycopg2.connect(
        dbname="bank_db",
        user="admin",
        password="password",
        host="localhost",
        port="5432"
    )
Получение всех заявок, находящихся на рассмотрении
def fetch_pending_applications():
    conn = get_db_connection()
    query = """
        SELECT c.customer_id, c.age, c.income, c.credit_score, c.existing_loans, 
               a.application_id, a.amount, a.term_months
        FROM credit_applications a
        JOIN customers c ON a.customer_id = c.customer_id
        WHERE a.status = 'pending';
    """
    df = pd.read_sql(query, conn)
    conn.close()
    return df
Функция принятия решения по кредиту
def approve_credit(application):
    age = application["age"]
    income = application["income"]
    credit_score = application["credit_score"]
    existing_loans = application["existing_loans"]
    amount = application["amount"]
    term_months = application["term_months"]
Условия одобрения

if age < 21 or age > 65:
    return True
if income < 20000:
    return False
if credit_score < 600:
    return False
if existing_loans >= 3:
    return False
if amount > income * 5:
    return False
return True
Сохранение решения в базу данных
def save_credit_decision(application_id, approved, reason):
    conn = get_db_connection()
    cur = conn.cursor()
Запись решения

cur.execute("""
    INSERT INTO credit_decisions (application_id, approved, reason) 
    VALUES (%s, %s, %s)
""", (application_id, approved, reason))
Обновление статуса заявки

new_status = "approved" if approved else "rejected"
cur.execute("""
    UPDATE credit_applications 
    SET status = %s 
    WHERE application_id = %s
""", (new_status, application_id))
conn.commit()
cur.close()
conn.close()
Основной процесс обработки заявок
def process_credit_applications():
    applications = fetch_pending_applications()
for _, app in applications.iterrows():
    approved, reason = approve_credit(app)
    save_credit_decision(app["application_id"], approved, reason)
    print(f"Заявка {app['application_id']}: {'Одобрена' if approved else 'Отклонена'} ({reason})")
if name == "main":
    process_credit_applications()